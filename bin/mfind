#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 */

var http = require('http');
var https = require('https');
var path = require('path');
var url = require('url');
var util = require('util');

var assert = require('assert-plus');
var bunyan = require('bunyan');
var dashdash = require('dashdash');
var vasync = require('vasync');

var manta = require('../lib');


///--- Functions

/**
 * Create a dashdash options parser for this command
 *
 * @param {String} name: Required. The command name.
 * @returns {Object} A dashdash options parser for the command.
 */
function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['limit', 'l'],
                type: 'positiveInteger',
                help: 'limit the number of results returned',
                helpArg: 'LIMIT'
            },
            {
                names: ['name', 'n'],
                type: 'string',
                help: 'only list objects that match /name/',
                helpArg: 'NAME'
            },
            {
                names: ['parallel', 'p'],
                type: 'positiveInteger',
                help: 'limit concurrent operations (default 50)',
                'default': 50,
                helpArg: 'NUM'
            },
            {
                names: ['size', 's'],
                type: 'positiveInteger',
                help: 'only list objects greater than <size> bytes',
                helpArg: 'SIZE'
            },
            {
                names: ['type', 't'],
                type: 'string',
                help: 'only return names of type <type> d=directory, o=object',
                helpArg: 'd|o'
            },
            {
                names: ['mindepth'],
                type: 'positiveInteger',
                help: 'only return items with at least this depth',
                helpArg: 'DEPTH'
            },
            {
                names: ['maxdepth'],
                type: 'positiveInteger',
                help: 'only return items less than this depth',
                helpArg: 'DEPTH'
            },
            {
                names: ['json', 'j'],
                type: 'bool',
                help: 'Output a newline-separated JSON stream of find results.'
            }
        ])
    });

    return (parser);
}


function printError(epath, err) {
    console.error('mfind: in ' + epath + ': ' +
                  (process.env.DEBUG === '1' ? err.stack : err.toString()));
}


/**
 * Handle command-specific options parsing and checking.
 *
 * @param {Object} opts: Required. A parsed options object.
 * @param {Object} parser: Required. A dashdash option parser.
 * @returns {Object} A possibly mutated version of the `opts` input parameter.
 */
function parseCmdOptions(opts, parser) {
    if (opts.name) {
        opts.name = new RegExp(opts.name);
    }

    opts.paths = opts._args;

    return (opts);
}


function printEntry(opts, obj) {
    if (opts.json) {
        console.log(JSON.stringify(obj));
    } else {
        console.log(obj.parent + (obj.name ? ('/' + obj.name) : ''));
    }
}


///--- Mainline

(function main() {
    var argTypes = ['mpath'];
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        parseCmdOptions: parseCmdOptions,
        log: log
    };
    var options = manta.parseOptions(parseArgs);

    var client = manta.createBinClient(options);
    var barrier = vasync.barrier();
    var print = printEntry.bind(null, options);
    var totalEntries = 0;
    var lastError;

    barrier.once('drain', function () {
        client.close();
        if (lastError !== undefined) {
            process.exit(1);
        }
    });

    assert(options.paths.length >= 1, 'no paths specified');
    options.paths.forEach(function (p, i) {
        var id = util.format('%d %s', i, p);
        barrier.start(id);
        client.ftw(p, options, function (err, res) {
            if (err) {
                if (err.name === 'InvalidDirectoryError') {
                    // Hack this up as the object is the full path
                    err.info.name = '';
                    totalEntries++;
                    print(err.info);
                    if (options.limit && totalEntries >= options.limit) {
                        process.exit(0);
                    }
                    barrier.done(id);
                    return;
                } else if (err.name === 'NotFoundError') {
                    if (err.path === undefined)
                        err.path = p;
                    printError(err.path, err);
                    lastError = err;
                    barrier.done(id);
                    return;
                } else {
                    var epath = p;
                    if (err.path !== undefined)
                        epath = err.path;
                    printError(epath, err);
                    process.exit(1);
                }
            }

            res.on('entry', print);
            res.on('end', barrier.done.bind(barrier, id));
        });
    });
})();
