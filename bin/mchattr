#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 */

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');

var manta = require('../lib');


///--- Functions

/**
 * Create a dashdash options parser for this command
 *
 * @param {String} name: Required. The command name.
 * @returns {Object} A dashdash options parser for the command.
 */
function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['header', 'H'],
                type: 'arrayOfString',
                help: 'HTTP headers to include',
                helpArg: 'HEADER'
            }
        ])
    });

    return (parser);
}


function ifError(err) {
    if (err) {
        console.error('mchattr: ' + err.toString());
        process.exit(1);
    }
}


function printEntry(obj) {
    console.log('%j', obj);
}


///--- Mainline

(function main() {
    var name = path.basename(process.argv[1]);
    var argTypes = ['mpath'];
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });

    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        log: log
    };
    var options = manta.parseOptions(parseArgs);

    var client = manta.createBinClient(options);
    var i = -1;
    var opts = {
        headers: options.headers
    };

    (function chattr(cb_err) {
        ifError(cb_err);

        var p = options.paths[++i];
        if (!p) {
            client.close();
        } else {
            client.chattr(p, opts, chattr);
        }
    })();
})();
