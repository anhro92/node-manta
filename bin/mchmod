#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 */

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');

var manta = require('../lib');


///--- Functions

function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS
    });

    return (parser);
}


function ifError(err, name) {
    if (err) {
        console.error('%s: %s', name, err.toString());
        process.exit(1);
    }
}


/**
 * Handle command-specific options parsing and checking.
 *
 * @param {Object} opts: Required. A parsed options object.
 * @param {Object} parser: Required. A dashdash option parser.
 * @returns {Object} A possibly mutated version of the `opts` input parameter.
 */
function parseCmdOptions(opts, parser) {
    if (opts._args.length < 1) {
        manta.cli_usage(parser, 'role required',
                        '-- [+-=]role,... path...');
    }

    var roleOpt = opts._args.shift();
    var operation = roleOpt.charAt(0);

    if (operation !== '+' && operation !== '-' && operation !== '=') {
        manta.cli_usage(parser,
                        'operation should be one of "+", "-" or "="');
    }

    opts.mchmodOperation = operation;
    opts.mchmodRoles = roleOpt.substring(1).split(',');

    return (opts);
}


function printEntry(obj) {
    console.log('%j', obj);
}



///--- Mainline

(function main() {
    var argTypes = ['mpath'];
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        parseCmdOptions: parseCmdOptions,
        log: log,
        extra: '-- [+-=]role,... path...'
    };
    var options = manta.parseOptions(parseArgs);

    var client = manta.createBinClient(options);
    var i = -1;

    (function chmod(cb_err) {
        ifError(cb_err, name);

        var opts = {
            headers: {}
        };

        var p = options.paths[++i];
        if (!p) {
            client.close();
            return;
        }

        if (options.mchmodOperation === '=') {
            opts.headers['role-tag'] = options.mchmodRoles.join(',');
            client.chattr(p, opts, chmod);
            return;
        }

        client.info(p, options, function (err, info, res) {
            if (err && err.name === 'AuthorizationFailedError') {
                console.error('%s: getobject access required for %s %s', name,
                    name, options.mchmodOperation);
                process.exit(1);
            }
            ifError(err, name);
            var roles;
            if (info.headers['role-tag']) {
                /* JSSTYLED */
                roles = info.headers['role-tag'].split(/\s*,\s*/);
            } else {
                roles = [];
            }

            if (options.mchmodOperation === '+') {
                options.mchmodRoles.forEach(function (role) {
                    if (roles.indexOf(role) < 0) {
                        roles.push(role);
                    }
                });
            } else if (options.mchmodOperation === '-') {
                options.mchmodRoles.forEach(function (role) {
                    var index = roles.indexOf(role);
                    if (index >= 0) {
                        roles.splice(index, 1);
                    }
                });
            }
            opts.headers['role-tag'] = roles.join(',');
            client.chattr(p, opts, chmod);
        });
    })();
})();
